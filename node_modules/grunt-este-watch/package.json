{
  "name": "grunt-este-watch",
  "version": "0.1.18",
  "description": "Run predefined tasks whenever watched file changes. LiveReload included.",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/steida/grunt-este-watch.git"
  },
  "keywords": [
    "Node",
    "Watch",
    "gruntplugin",
    "LiveReload"
  ],
  "dependencies": {
    "semver": "^3.0.1",
    "tiny-lr-fork": "0.0.5"
  },
  "devDependencies": {
    "grunt": "^0.4.4",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-release": "^0.7.0"
  },
  "author": {
    "name": "Daniel Steigerwald"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "grunt test"
  },
  "bugs": {
    "url": "https://github.com/steida/grunt-este-watch/issues"
  },
  "engines": {
    "node": ">= 0.9.2"
  },
  "readme": "# grunt-este-watch [![Build Status](https://secure.travis-ci.org/steida/grunt-este-watch.png?branch=master)](http://travis-ci.org/steida/grunt-este-watch) [![Dependency Status](https://david-dm.org/steida/grunt-este-watch.png)](https://david-dm.org/steida/grunt-este-watch) [![devDependency Status](https://david-dm.org/steida/grunt-este-watch/dev-status.png)](https://david-dm.org/steida/grunt-este-watch#info=devDependencies)\n> Run predefined tasks whenever watched file changes. LiveReload included.\n\n__Update__: I extracted core watching functionality into separate [module](https://github.com/steida/este-watch).\nSo you can use it with [gulpjs](http://gulpjs.com) for example. Tests are included.\nIf you want to participate on open source and become famous, send me pull request to update this grunt-este-watch module.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-este-watch --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-este-watch');\n```\n\n## Watch task\n_Run this task with the `grunt esteWatch` command._\n\n### Settings\n\n#### options.dirs\n\nNote you have to specify only directory ('dir'), or directory recursively ('dir/**/') with all its subdirectories.\n\nType: `Array.<string>`\nDefault:\n```js\n[\n  'bower_components/closure-library/**/',\n  'bower_components/este-library/**/',\n  '!bower_components/este-library/node_modules/**/',\n  'client/**/{js,css}/**/'\n]\n```\n\nList of watched directories.\n\n#### options.livereload\nType: `Object`\nDefault:\n```js\n{\n  enabled: true,\n  port: 35729,\n  extensions: ['js', 'css']\n  key: null, // provide a filepath or Buffer for `key` and `cert` to enable SSL.\n  cert: null\n}\n```\n\n### Examples\n\nWatch and compile CoffeeScript.\n```coffee\nesteWatch:\n  options:\n    # just a dirs, no file paths\n    dirs: ['dirOne/**/', 'dirTwo/**/']\n\n  'coffee': (filepath) ->\n      files = [\n        expand: true\n        src: filepath\n        ext: '.js'\n      ];\n      grunt.config ['coffee', 'app', 'files'], files\n      ['coffee:app']\n\n  # to define all\n  '*': (filepath) ->\n    return ['urequire:uberscoreUMD']\n```\n\nFrom [github.com/steida/este](http://github.com/steida/este) Gruntfile.coffee.\n\n```js\ngrunt.initConfig({\n  esteWatch: {\n    options: {\n      dirs: ['bower_components/closure-library/**/',\n      'bower_components/este-library/**/',\n      '!bower_components/este-library/node_modules/**/',\n      'client/**/{js,css}/**/']\n    },\n    coffee: function(filepath) {\n      var files = [{\n        expand: true,\n        src: filepath,\n        ext: '.js'\n      }];\n      grunt.config(['coffee', 'app', 'files'], files);\n      grunt.config(['coffee2closure', 'app', 'files'], files);\n      return ['coffee:app', 'coffee2closure:app'];\n    },\n    soy: function(filepath) {\n      grunt.config(['esteTemplates', 'app'], filepath);\n      return ['esteTemplates:app'];\n    },\n    js: function(filepath) {\n      grunt.config(['esteUnitTests', 'app', 'src'], filepath);\n      var tasks = ['esteDeps:all', 'esteUnitTests:app'];\n      if (grunt.option('stage')) {\n        tasks.push('esteBuilder:app');\n      }\n      return tasks;\n    },\n    styl: function(filepath) {\n      grunt.config(['stylus', 'all', 'files'], [{\n        expand: true,\n        src: filepath,\n        ext: '.css'\n      }]);\n      return ['stylus:all', 'stylus:app'];\n    },\n    css: function(filepath) {\n      if (grunt.option('stage')) {\n        return 'cssmin:app';\n      }\n    }\n  }\n});\n```\n\n#### Live Reloading\nLive reloading is built into the watch task and enabled by default.\n\n##### Enabling Live Reload in Your HTML\nOnce you've started a live reload server you'll be able to access the live reload script. To enable live reload on your page, add a script tag before your closing `</body>` tag pointing to the `livereload.js` script:\n\n```html\n<script src=\"//localhost:35729/livereload.js\"></script>\n```\n\nFeel free to add this script to your template situation and toggle with some sort of `dev` flag. Note that if you are using SSL in dev,\nyou will need to add a `key` and `cert` config to `options.livereload`.\n\n### FAQs\n\n#### What's wrong with official grunt-contrib-watch?\nIt's slow and buggy, because it uses combination fs.fileWatch and fs.watch, for\nhistorical reason. From Node 0.9.2+, fs.watch is ok.\n\n[github.com/steida/este](http://github.com/steida/este) needs maximum performance and\nstability, so that's why I had to create yet another Node.js file watcher.\nThis watcher is continuously tested on Mac, Linux, Win platforms.\n\n#### grunt-contrib-watch Issues\n  - Strange \"Abort trap: 6\" exceptions.\n  - File added in new directory isn't detected.\n  - LiveReload console.log mess during livereloading.\n  - Polling to much files. Etc.\n  \n#### Note about editors atomic save\nNode.js fs.watch sometimes does not work with editors atomic save. For example, Node.js v0.10.17 works while\nv0.10.18 doesn't. Fix for SublimeText is easy, just disable it via ```\"atomic_save\": false```.\n\n## License\nCopyright (c) 2013 Daniel Steigerwald\n\nLicensed under the MIT license.\n",
  "_id": "grunt-este-watch@0.1.18",
  "dist": {
    "shasum": "139387569a8cb363409be3f568c752a99e947cdf"
  },
  "_from": "grunt-este-watch@^0.1.18",
  "_resolved": "https://registry.npmjs.org/grunt-este-watch/-/grunt-este-watch-0.1.18.tgz"
}
